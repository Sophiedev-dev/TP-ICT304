// Script de r√©paration avec g√©n√©ration d‚Äôun rapport en format .txt

const fs = require('fs');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const errorList = [
  '1. V√©rification incorrecte de "a" (faux n√©gatif si a = 0)',
  '2. Mauvaise gestion de b === 0 (le test n\'est pas n√©cessaire)',
  '3. Erreur d\'op√©ration (a - b au lieu de a + b)'
];

const errorExplanation = `
Erreurs d√©tect√©es dans sum.js :
${errorList.join('\n')}
Souhaitez-vous appliquer les correctifs ? (y/n) : `;

function generateTxtReport({ accepted, message }) {
  const now = new Date();
  const reportText = [
    `===== RAPPORT DE R√âPARATION =====`,
    `Date : ${now.toLocaleString()}`,
    ``,
    `Erreurs d√©tect√©es :`,
    ...errorList,
    ``,
    `Correction appliqu√©e : ${accepted ? "OUI" : "NON"}`,
    ``,
    `R√©sum√© :`,
    message,
    ``,
    `=================================`
  ].join('\n');

  fs.writeFileSync('repair-report.txt', reportText);
  console.log('\nüìù Rapport g√©n√©r√© : repair-report.txt');
}

function repair() {
  rl.question(errorExplanation, function (answer) {
    const accepted = answer.trim().toLowerCase() === 'y';

    let message = '';

    if (accepted) {
      const fixedCode = `
// ‚úÖ Version r√©par√©e
function sum(a, b) {
  return a + b;
}

module.exports = sum;
`;
      fs.writeFileSync('sum.js', fixedCode);
      message = "Les erreurs ont √©t√© corrig√©es automatiquement. La fonction sum utilise maintenant 'a + b'.";
      console.log('\n‚úÖ Corrections appliqu√©es. Vous pouvez relancer les tests avec: npm test');
    } else {
      message = "L'utilisateur a refus√© les corrections. Le code contient toujours les erreurs.";
      console.log('\n‚ùå Corrections annul√©es. Les erreurs persistent.');
    }

    generateTxtReport({ accepted, message });
    rl.close();
  });
}

repair();
